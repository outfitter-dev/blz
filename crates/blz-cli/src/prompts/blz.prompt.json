{
  "target": "blz",
  "summary": "Local-first CLI for pulling llms.txt / llms-full.txt docs, indexing them with Tantivy, and retrieving exact spans for prompting or audits.",
  "core_workflows": [
    {
      "name": "First-time setup",
      "steps": [
        "Identify the docs you need (React, Next.js, internal handbooks, etc.).",
        "Install the CLI (`cargo install --path crates/blz-cli`).",
        "Add each source once with `blz add <alias> <llms-full.txt> -y`.",
        "Run `blz list --format json` to confirm they indexed cleanly."
      ]
    },
    {
      "name": "Agent retrieval loop",
      "steps": [
        "Call `blz search \"<query>\" --format json` to gather ranked snippets.",
        "Pick the best hit (highest score / relevant alias).",
        "Call `blz get <alias>:<lines> --context 3 --format text` to pull verified context.",
        "Compose the LLM prompt using the retrieved span + metadata (alias, line numbers, checksum)."
      ]
    },
    {
      "name": "Maintenance",
      "steps": [
        "Schedule `blz update --all` (daily/weekly) so caches stay fresh.",
        "Use `blz list --status` to monitor stale sources or checksum mismatches.",
        "Hydrate dev environments with `./hydrate-dev.sh` if you use the `blz-dev` binary."
      ]
    }
  ],
  "key_commands": [
    {
      "command": "blz search \"<query>\" [--source <alias>] --format json",
      "purpose": "Retrieve ranked snippets with alias, lines, and checksum for downstream prompts."
    },
    {
      "command": "blz get <alias>:<start-end> [--context N] --format text",
      "purpose": "Pull deterministic spans (exact lines) when preparing assistant answers."
    },
    {
      "command": "blz add <alias> <llms-full.txt> -y",
      "purpose": "Onboard a new documentation source. Supports manifests for batch ingestion."
    },
    {
      "command": "blz update --all",
      "purpose": "Refresh previously indexed sources while respecting ETag/Last-Modified headers."
    },
    {
      "command": "blz --prompt <command>",
      "purpose": "Print JSON guidance for any command when building scripts or LLM tool prompts."
    }
  ],
  "agent_tips": [
    "Set `BLZ_OUTPUT_FORMAT=json` globally so scripted runs default to machine-friendly payloads.",
    "Treat aliases as canonical identifiers (they map to directory names under the data directory).",
    "Use the checksum returned from `blz search`/`blz get` to deduplicate spans inside prompts.",
    "Keep prompts small: prefer 2-5 spans with tight context instead of dumping entire pages.",
    "When working alongside MCP servers, use BLZ for deterministic recall and the MCP endpoint for exploratory browsing."
  ],
  "integration_points": {
    "environment_variables": [
      "BLZ_OUTPUT_FORMAT (text/json/jsonl)",
      "BLZ_CONFIG / BLZ_CONFIG_DIR / BLZ_DATA_DIR for custom storage locations",
      "BLZ_SUPPRESS_DEPRECATIONS=1 to silence compatibility warnings"
    ],
    "dev_binary": "Use `./install-dev.sh` to install the `blz-dev` variant. It scopes data to ~/.blz-dev/ so you can test without touching production caches.",
    "hydration": "Run `./hydrate-dev.sh` to copy production sources into the dev profile when you need realistic fixtures."
  }
}
