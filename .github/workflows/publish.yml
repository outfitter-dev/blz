name: Publish Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to release (e.g., v0.2.0)'
        required: true
        type: string
      dist_tag:
        description: 'Override npm dist-tag (defaults based on version)'
        required: false
        type: string
  workflow_call:
    # Enables release.yml or other orchestrators to invoke this pipeline directly
    # Callers must grant pull-requests: read so the release_notes job can enumerate PRs
    inputs:
      tag:
        required: true
        type: string
      dist_tag:
        required: false
        type: string
    secrets:
      NPM_TOKEN:
        required: false
      CARGO_REGISTRY_TOKEN:
        required: false
      HOMEBREW_TAP_TOKEN:
        required: false

permissions:
  contents: read

concurrency:
  group: publish-${{ github.ref_name || inputs.tag }}
  cancel-in-progress: false

jobs:
  prepare:
    name: Prepare Release Metadata
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.vars.outputs.tag }}
      version: ${{ steps.vars.outputs.version }}
      dist_tag: ${{ steps.vars.outputs.dist_tag }}
      prerelease: ${{ steps.vars.outputs.prerelease }}
      publish_homebrew: ${{ steps.vars.outputs.publish_homebrew }}
    steps:
      - name: Resolve tag
        id: vars
        env:
          INPUT_TAG: ${{ inputs.tag }}
          INPUT_DIST_TAG: ${{ inputs.dist_tag }}
          EVENT_NAME: ${{ github.event_name }}
          REF_NAME: ${{ github.ref_name }}
        run: |
          if [[ "$EVENT_NAME" == "workflow_dispatch" || "$EVENT_NAME" == "workflow_call" ]]; then
            TAG="$INPUT_TAG"
          else
            TAG="$REF_NAME"
          fi
          if [[ -z "$TAG" ]]; then
            echo "::error::Missing tag input"
            exit 1
          fi
          if (( ${#TAG} > 64 )); then
            echo "::error::Invalid tag: $TAG (too long)"
            exit 1
          fi
          if [[ ! "$TAG" =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-[0-9A-Za-z-]+(\.[0-9A-Za-z-]+)*)?(\+[0-9A-Za-z-]+(\.[0-9A-Za-z-]+)*)?$ ]]; then
            echo "::error::Invalid tag format: $TAG"
            exit 1
          fi
          VERSION="${TAG#v}"
          if [[ -n "$INPUT_DIST_TAG" ]]; then
            DIST_TAG="$INPUT_DIST_TAG"
          else
            if [[ "$VERSION" == *"-canary."* ]]; then
              DIST_TAG='canary'
            elif [[ "$VERSION" == *"-beta"* ]]; then
              DIST_TAG='beta'
            elif [[ "$VERSION" == *"-alpha"* ]]; then
              DIST_TAG='alpha'
            elif [[ "$VERSION" == *"-rc."* || "$VERSION" == *"-rc" ]]; then
              DIST_TAG='next'
            else
              DIST_TAG='latest'
            fi
          fi
          if [[ "$VERSION" == *-* ]]; then
            PRERELEASE='true'
          else
            PRERELEASE='false'
          fi
          if [[ "$PRERELEASE" == 'true' ]]; then
            PUBLISH_HOMEBREW='false'
          else
            PUBLISH_HOMEBREW='true'
          fi
          # Emit all outputs atomically to keep ShellCheck happy and avoid partial writes
          printf '%s\n' \
            "tag=$TAG" \
            "version=$VERSION" \
            "dist_tag=$DIST_TAG" \
            "prerelease=$PRERELEASE" \
            "publish_homebrew=$PUBLISH_HOMEBREW" \
            >> "$GITHUB_OUTPUT"
          {
            echo "### Publish Parameters"
            echo "- Tag: $TAG"
            echo "- Version: $VERSION"
            echo "- npm dist-tag: $DIST_TAG"
            echo "- Pre-release: $PRERELEASE"
            echo "- Publish Homebrew: $PUBLISH_HOMEBREW"
          } >> "$GITHUB_STEP_SUMMARY"

  build_darwin_arm64:
    name: Build macOS arm64 binary
    needs: prepare
    uses: ./.github/workflows/reusable-build.yml
    with:
      target: darwin-arm64
      version: ${{ needs.prepare.outputs.version }}
      cache_key: release-${{ needs.prepare.outputs.version }}
      use_cache: false
    secrets: inherit

  build_darwin_x64:
    name: Build macOS x64 binary
    needs: prepare
    uses: ./.github/workflows/reusable-build.yml
    with:
      target: darwin-x64
      version: ${{ needs.prepare.outputs.version }}
      cache_key: release-${{ needs.prepare.outputs.version }}
      use_cache: false
    secrets: inherit

  build_linux_x64:
    name: Build Linux x64 binary
    needs: prepare
    uses: ./.github/workflows/reusable-build.yml
    with:
      target: linux-x64
      version: ${{ needs.prepare.outputs.version }}
      cache_key: release-${{ needs.prepare.outputs.version }}
      use_cache: false
    secrets: inherit

  build_windows_x64:
    name: Build Windows x64 binary
    needs: prepare
    uses: ./.github/workflows/reusable-build.yml
    with:
      target: windows-x64
      version: ${{ needs.prepare.outputs.version }}
      cache_key: release-${{ needs.prepare.outputs.version }}
      use_cache: false
    secrets: inherit

  upload_release_assets:
    name: Upload Release Assets
    permissions:
      contents: write
    needs:
      - prepare
      - build_darwin_arm64
      - build_darwin_x64
      - build_linux_x64
      - build_windows_x64
    runs-on: ubuntu-latest
    outputs:
      sha_arm64: ${{ steps.asset_shas.outputs.sha_arm64 }}
      sha_x64: ${{ steps.asset_shas.outputs.sha_x64 }}
      sha_linux: ${{ steps.asset_shas.outputs.sha_linux }}
    steps:
      - name: Create dist directory
        run: mkdir -p dist

      - name: Download macOS arm64 artifact
        uses: actions/download-artifact@v4
        with:
          name: blz-${{ needs.prepare.outputs.version }}-darwin-arm64
          path: dist/blz-${{ needs.prepare.outputs.version }}-darwin-arm64

      - name: Download macOS x64 artifact
        uses: actions/download-artifact@v4
        with:
          name: blz-${{ needs.prepare.outputs.version }}-darwin-x64
          path: dist/blz-${{ needs.prepare.outputs.version }}-darwin-x64

      - name: Download Linux x64 artifact
        uses: actions/download-artifact@v4
        with:
          name: blz-${{ needs.prepare.outputs.version }}-linux-x64
          path: dist/blz-${{ needs.prepare.outputs.version }}-linux-x64

      - name: Download Windows x64 artifact
        uses: actions/download-artifact@v4
        with:
          name: blz-${{ needs.prepare.outputs.version }}-windows-x64
          path: dist/blz-${{ needs.prepare.outputs.version }}-windows-x64

      - name: Flatten artifacts
        run: |
          set -euo pipefail
          VERSION="${{ needs.prepare.outputs.version }}"
          # All builds run via reusable-build; fail immediately if expected payloads go missing
          locate_and_move() {
            local search_hint="$1"
            local filename="$2"
            local dest="$3"
            local match=""

            if [[ -d "$search_hint" ]]; then
              match=$(find "$search_hint" -type f -name "$filename" -print -quit || true)
            elif [[ -f "$search_hint" && "$(basename "$search_hint")" == "$filename" ]]; then
              match="$search_hint"
            fi

            if [[ -z "$match" ]]; then
              match=$(find dist -type f -name "$filename" -print -quit || true)
              if [[ -n "$match" ]]; then
                echo "::warning::Found $filename at $match instead of under $search_hint; continuing" >&2
              fi
            fi

            if [[ -z "$match" ]]; then
              echo "::group::Artifact layout for debugging"
              find dist -maxdepth 5 -type d -print || true
              find dist -maxdepth 6 -type f -print || true
              echo "::endgroup::"
              echo "::error::Missing expected artifact $filename. Looked under $search_hint and dist/" >&2
              exit 1
            fi

            if [[ "$match" != "$dest" ]]; then
              if [[ -e "$dest" ]] && cmp -s "$match" "$dest"; then
                :
              else
                mv -f "$match" "$dest"
              fi
            fi
          }

          locate_and_move "dist/blz-${VERSION}-darwin-arm64" "blz-${VERSION}-darwin-arm64.tar.gz" "dist/blz-${VERSION}-darwin-arm64.tar.gz"
          locate_and_move "dist/blz-${VERSION}-darwin-x64" "blz-${VERSION}-darwin-x64.tar.gz" "dist/blz-${VERSION}-darwin-x64.tar.gz"
          locate_and_move "dist/blz-${VERSION}-linux-x64" "blz-${VERSION}-linux-x64.tar.gz" "dist/blz-${VERSION}-linux-x64.tar.gz"
          locate_and_move "dist/blz-${VERSION}-windows-x64" "blz-${VERSION}-windows-x64.zip" "dist/blz-${VERSION}-windows-x64.zip"

          extract_binary() {
            local archive_path="$1"
            local desired_path="$2"
            local archive_type="$3"
            local tmp
            tmp=$(mktemp -d)
            case "$archive_type" in
              tar)
                tar -xzf "$archive_path" -C "$tmp"
                ;;
              zip)
                unzip -qq "$archive_path" -d "$tmp"
                ;;
              *)
                echo "::error::Unsupported archive type: $archive_type" >&2
                rm -rf "$tmp"
                exit 1
                ;;
            esac

            local source
            if [[ -f "$tmp/blz" ]]; then
              source="$tmp/blz"
            elif [[ -f "$tmp/blz.exe" ]]; then
              source="$tmp/blz.exe"
            else
              echo "::group::Archive contents"
              find "$tmp" -maxdepth 2 -type f -print || true
              echo "::endgroup::"
              echo "::error::Unable to locate extracted binary within $archive_path" >&2
              rm -rf "$tmp"
              exit 1
            fi

            mv "$source" "$desired_path"
            chmod +x "$desired_path" || true
            rm -rf "$tmp"
          }

          extract_binary "dist/blz-${VERSION}-darwin-arm64.tar.gz" "dist/blz-darwin-arm64" tar
          extract_binary "dist/blz-${VERSION}-darwin-x64.tar.gz" "dist/blz-darwin-x64" tar
          extract_binary "dist/blz-${VERSION}-linux-x64.tar.gz" "dist/blz-linux-x64" tar
          extract_binary "dist/blz-${VERSION}-windows-x64.zip" "dist/blz-win32-x64.exe" zip

      - name: Compute asset checksums
        id: asset_shas
        run: |
          set -euo pipefail
          VERSION='${{ needs.prepare.outputs.version }}'
          sha_arm64=$(sha256sum "dist/blz-${VERSION}-darwin-arm64.tar.gz" | awk '{print $1}')
          sha_x64=$(sha256sum "dist/blz-${VERSION}-darwin-x64.tar.gz" | awk '{print $1}')
          sha_linux=$(sha256sum "dist/blz-${VERSION}-linux-x64.tar.gz" | awk '{print $1}')
          echo "::add-mask::$sha_arm64"
          echo "::add-mask::$sha_x64"
          echo "::add-mask::$sha_linux"
          {
            echo "sha_arm64=$sha_arm64"
            echo "sha_x64=$sha_x64"
            echo "sha_linux=$sha_linux"
          } >> "$GITHUB_OUTPUT"
          {
            echo "### Asset SHA256"
            echo "- darwin-arm64: $sha_arm64"
            echo "- darwin-x64:   $sha_x64"
            echo "- linux-x64:    $sha_linux"
          } >> "$GITHUB_STEP_SUMMARY"

      - name: Assemble files list
        id: files
        run: |
          set -euo pipefail
          VERSION='${{ needs.prepare.outputs.version }}'
          : > files.txt
          for f in \
            "dist/blz-${VERSION}-darwin-arm64.tar.gz" \
            "dist/blz-${VERSION}-darwin-x64.tar.gz" \
            "dist/blz-${VERSION}-linux-x64.tar.gz" \
            "dist/blz-${VERSION}-windows-x64.zip" \
            "dist/blz-darwin-arm64" \
            "dist/blz-darwin-x64" \
            "dist/blz-linux-x64" \
            "dist/blz-win32-x64.exe"
          do
            [[ -f "$f" ]] && echo "$f" >> files.txt
          done
          {
            echo 'list<<EOF'
            cat files.txt
            echo 'EOF'
          } >> "$GITHUB_OUTPUT"

      - name: Upload assets to draft release
        if: ${{ steps.files.outputs.list != '' }}
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.prepare.outputs.tag }}
          name: blz ${{ needs.prepare.outputs.version }}
          draft: true
          prerelease: ${{ needs.prepare.outputs.prerelease == 'true' }}
          files: ${{ steps.files.outputs.list }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish_release:
    name: Publish GitHub Release
    permissions:
      contents: write
    needs:
      - prepare
      - upload_release_assets
    runs-on: ubuntu-latest
    steps:
      - name: Publish release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          echo "Publishing release ${{ needs.prepare.outputs.tag }}..."
          if ! gh release edit "${{ needs.prepare.outputs.tag }}" --draft=false --repo "${{ github.repository }}"; then
            echo "❌ Failed to publish release ${{ needs.prepare.outputs.tag }}"
            exit 1
          fi
          echo "✅ Release ${{ needs.prepare.outputs.tag }} has been published"

          # Add a short delay to ensure GitHub API propagation
          sleep 5

  publish_npm:
    name: npm
    permissions:
      contents: read
      id-token: write
    needs:
      - prepare
      - publish_release
    uses: ./.github/workflows/publish-npm.yml
    with:
      tag: ${{ needs.prepare.outputs.tag }}
      version: ${{ needs.prepare.outputs.version }}
      dist_tag: ${{ needs.prepare.outputs.dist_tag }}
    secrets:
      npm-token: ${{ secrets.NPM_TOKEN }}

  publish_crates:
    name: crates.io
    needs:
      - prepare
      - publish_release
    uses: ./.github/workflows/publish-crates.yml
    with:
      tag: ${{ needs.prepare.outputs.tag }}
      version: ${{ needs.prepare.outputs.version }}
    secrets:
      cargo-token: ${{ secrets.CARGO_REGISTRY_TOKEN }}

  publish_homebrew:
    name: homebrew
    needs:
      - prepare
      - upload_release_assets
      - publish_release
    if: ${{ needs.prepare.outputs.publish_homebrew == 'true' }}
    uses: ./.github/workflows/publish-homebrew.yml
    with:
      tag: ${{ needs.prepare.outputs.tag }}
      version: ${{ needs.prepare.outputs.version }}
      enabled: true
      sha_arm64: ${{ needs.upload_release_assets.outputs.sha_arm64 }}
      sha_x64: ${{ needs.upload_release_assets.outputs.sha_x64 }}
      sha_linux: ${{ needs.upload_release_assets.outputs.sha_linux }}
    secrets:
      homebrew-token: ${{ secrets.HOMEBREW_TAP_TOKEN }}

  release_notes:
    name: Generate Release Notes
    permissions:
      contents: read
      pull-requests: read
    needs:
      - prepare
      - publish_release
    if: ${{ always() && needs.publish_release.result == 'success' }}
    runs-on: ubuntu-latest
    outputs:
      body: ${{ steps.notes.outputs.body }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine previous tag
        id: previous
        run: |
          git fetch --tags --force --quiet
          TAG='${{ needs.prepare.outputs.tag }}'
          if git rev-parse "$TAG" >/dev/null 2>&1; then
            PREV=$(git describe --tags --abbrev=0 "$TAG^" 2>/dev/null || echo '')
          else
            PREV=$(git describe --tags --abbrev=0 --match 'v*' 2>/dev/null || echo '')
          fi
          echo "tag=$PREV" >> "$GITHUB_OUTPUT"

      - name: Build release notes
        id: notes
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const tag = '${{ needs.prepare.outputs.tag }}';
            const previousTag = '${{ steps.previous.outputs.tag || '' }}';

            const prMap = new Map();

            if (previousTag) {
              const compare = await github.rest.repos.compareCommits({
                owner,
                repo,
                base: previousTag,
                head: tag,
              });

              for (const commit of compare.data.commits) {
                const prs = await github.rest.repos.listPullRequestsAssociatedWithCommit({
                  owner,
                  repo,
                  commit_sha: commit.sha,
                });
                for (const pr of prs.data) {
                  prMap.set(pr.number, pr);
                }
              }
            }

            const summaryLines = [];
            const contributors = new Set();

            if (prMap.size > 0) {
              const ordered = Array.from(prMap.values()).sort((a, b) => new Date(a.merged_at || a.closed_at || 0) - new Date(b.merged_at || b.closed_at || 0));
              for (const pr of ordered) {
                const author = pr.user ? `@${pr.user.login}` : 'unknown';
                summaryLines.push(`- ${pr.title} (#${pr.number}) — ${author}`);
                if (pr.user) {
                  contributors.add(`@${pr.user.login}`);
                }
              }
            } else {
              if (previousTag) {
                summaryLines.push('- No pull requests detected between tags.');
              } else {
                summaryLines.push('- Initial release.');
              }
            }

            const bodyParts = [];
            bodyParts.push('## Summary');
            bodyParts.push(summaryLines.join('\n'));

            if (contributors.size > 0) {
              bodyParts.push('\n## Contributors');
              bodyParts.push(Array.from(contributors).sort().map((c) => `- ${c}`).join('\n'));
            }

            const body = bodyParts.join('\n');
            core.setOutput('body', body);

  finalize:
    name: Update Release Notes
    permissions:
      contents: write
    needs:
      - prepare
      - publish_release
      - publish_npm
      - publish_crates
      - publish_homebrew
      - release_notes
    if: ${{ always() && needs.publish_release.result == 'success' && (needs.publish_npm.result == 'success' || needs.publish_crates.result == 'success' || needs.publish_homebrew.result == 'success') }}
    runs-on: ubuntu-latest
    steps:
      - name: Generate Release Status Report
        run: |
          {
            echo "## Release Status for ${{ needs.prepare.outputs.tag }}"
            echo ""
            echo "### Core Assets"
            echo "- ✅ GitHub Release: Published"
            echo ""
            echo "### Registry Publishing"
            if [[ "${{ needs.publish_npm.result }}" == "success" ]]; then
              echo "- ✅ npm: Published to @outfitter/blz"
            elif [[ "${{ needs.publish_npm.result }}" == "skipped" ]]; then
              echo "- ⏭️ npm: Skipped"
            else
              echo "- ❌ npm: Failed (check logs for details)"
            fi
            if [[ "${{ needs.publish_crates.result }}" == "success" ]]; then
              echo "- ✅ crates.io: Published blz-core and blz-cli"
            elif [[ "${{ needs.publish_crates.result }}" == "skipped" ]]; then
              echo "- ⏭️ crates.io: Skipped"
            else
              echo "- ❌ crates.io: Failed (check logs for details)"
            fi
            if [[ "${{ needs.publish_homebrew.result }}" == "success" ]]; then
              echo "- ✅ Homebrew: Formula updated"
            elif [[ "${{ needs.publish_homebrew.result }}" == "skipped" ]]; then
              echo "- ⏭️ Homebrew: Skipped (pre-release)"
            else
              echo "- ❌ Homebrew: Failed (check logs for details)"
            fi
          } >> "$GITHUB_STEP_SUMMARY"

      - name: Update release notes
        if: ${{ needs.release_notes.outputs.body != '' }}
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.prepare.outputs.tag }}
          name: blz ${{ needs.prepare.outputs.version }}
          body: ${{ needs.release_notes.outputs.body }}
          draft: false
          prerelease: ${{ needs.prepare.outputs.prerelease == 'true' }}
          make_latest: ${{ needs.prepare.outputs.prerelease == 'true' && 'false' || 'true' }}
