name: Release

on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to release (e.g., v0.1.6)'
        required: true
        type: string

permissions:
  contents: write

concurrency:
  group: release-${{ inputs.tag }}
  cancel-in-progress: false

jobs:
  # Safeguard: Verify this is actually a tag push
  verify-tag:
    name: "Release: Verify Tag"
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.extract.outputs.version }}
    steps:
      - name: Check tag format
        run: |
          TAG="${{ inputs.tag }}"
          if [[ ! "$TAG" =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-.*)?$ ]]; then
            echo "::error::Operation failed: Invalid tag format - $TAG (Expected: v*.*.* format)"
            exit 1
          fi
          echo "âœ… Tag: $TAG"

      - name: Extract version
        id: extract
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          TAG="${{ inputs.tag }}"
          if ! gh api "repos/${{ github.repository }}/git/refs/tags/${TAG}" --silent; then
            echo "::error::Operation failed: Tag not found - $TAG does not exist in repository"
            exit 1
          fi
          VERSION="${TAG#v}"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "ðŸ“¦ Version: $VERSION"

  build-darwin-arm64:
    if: ${{ false }} # legacy path disabled; replaced by matrix 'build'
    needs: verify-tag
    name: "Release: Build macOS arm64"
    runs-on: macos-14
    timeout-minutes: 45
    env:
      # Workaround for ring CPU feature detection issues on Apple Silicon
      RING_DISABLE_ASM: 1
    steps:
      - name: "Release: Checkout tag"
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.tag }}

      - name: "Release: Set up Rust"
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable

      - name: "Release: Setup cache"
        uses: Swatinem/rust-cache@v2
        with:
          prefix-key: "v2-rust"
          key: ${{ runner.os }}-${{ hashFiles('**/Cargo.lock') }}
          cache-on-failure: true

      - name: "Release: Build (release)"
        env:
          # Ensure required CPU features are enabled at compile time for ring
          RUSTFLAGS: "-C target-feature=+neon,+aes,+sha2,+pmull"
        run: |
          cargo build --release --locked

      - name: "Release: Prepare assets"
        run: |
          mkdir -p dist
          cp target/release/blz dist/blz-darwin-arm64
          chmod +x dist/blz-darwin-arm64
          # Create tarball for Homebrew (contains a single 'blz' file)
          cp target/release/blz blz
          tar -czf dist/blz-darwin-arm64.tar.gz blz
          rm blz
          shasum -a 256 dist/blz-darwin-arm64.tar.gz > dist/blz-darwin-arm64.tar.gz.sha256

      - name: "Release: Upload release assets"
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ inputs.tag }}
          generate_release_notes: true
          draft: true
          fail_on_unmatched_files: true
          files: |
            dist/blz-darwin-arm64
            dist/blz-darwin-arm64.tar.gz
            dist/blz-darwin-arm64.tar.gz.sha256
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-darwin-x64:
    if: ${{ false }} # legacy path disabled; replaced by matrix 'build'
    needs: verify-tag
    name: "Release: Build macOS x64"
    runs-on: macos-13
    timeout-minutes: 45
    steps:
      - name: "Release: Checkout tag"
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.tag }}

      - name: "Release: Set up Rust"
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable

      - name: "Release: Setup cache"
        uses: Swatinem/rust-cache@v2
        with:
          prefix-key: "v2-rust"
          key: ${{ runner.os }}-${{ hashFiles('**/Cargo.lock') }}
          cache-on-failure: true

      - name: "Release: Build (release)"
        run: |
          cargo build --release --locked

      - name: "Release: Prepare assets"
        run: |
          mkdir -p dist
          cp target/release/blz dist/blz-darwin-x64
          chmod +x dist/blz-darwin-x64
          # Create tarball for Homebrew (contains a single 'blz' file)
          cp target/release/blz blz
          tar -czf dist/blz-darwin-x64.tar.gz blz
          rm blz
          shasum -a 256 dist/blz-darwin-x64.tar.gz > dist/blz-darwin-x64.tar.gz.sha256

      - name: "Release: Upload release assets"
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ inputs.tag }}
          generate_release_notes: true
          draft: true
          fail_on_unmatched_files: true
          files: |
            dist/blz-darwin-x64
            dist/blz-darwin-x64.tar.gz
            dist/blz-darwin-x64.tar.gz.sha256
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-linux-x64:
    if: ${{ false }} # legacy path disabled; replaced by matrix 'build'
    needs: verify-tag
    name: "Release: Build Linux x64"
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: "Release: Checkout tag"
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.tag }}

      - name: "Release: Set up Rust"
        uses: dtolnay/rust-toolchain@stable

      - name: "Release: Install lld"
        run: sudo apt-get update && sudo apt-get install -y lld

      - name: "Release: Setup cache"
        uses: Swatinem/rust-cache@v2
        with:
          prefix-key: "v2-rust"
          key: ${{ runner.os }}-${{ hashFiles('**/Cargo.lock') }}
          cache-on-failure: true

      - name: "Release: Build (release)"
        run: |
          cargo build --release --locked

      - name: "Release: Prepare assets"
        run: |
          mkdir -p dist
          cp target/release/blz dist/blz-linux-x64
          chmod +x dist/blz-linux-x64

      - name: "Release: Upload release assets"
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ inputs.tag }}
          generate_release_notes: true
          draft: true
          fail_on_unmatched_files: true
          files: |
            dist/blz-linux-x64
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-linux-arm64:
    if: ${{ false }} # legacy path disabled; replaced by matrix 'build'
    needs: verify-tag
    name: "Release: Build Linux arm64"
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: "Release: Checkout tag"
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.tag }}

      - name: "Release: Set up Rust"
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: aarch64-unknown-linux-gnu

      - name: "Release: Setup cache"
        uses: Swatinem/rust-cache@v2
        with:
          prefix-key: "v2-rust"
          key: ${{ runner.os }}-arm64-${{ hashFiles('**/Cargo.lock') }}
          cache-on-failure: true

      - name: "Release: Install cross toolchain"
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu

      - name: "Release: Build (release)"
        env:
          CC_aarch64_unknown_linux_gnu: aarch64-linux-gnu-gcc
          CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: aarch64-linux-gnu-gcc
        run: |
          cargo build --release --locked --target aarch64-unknown-linux-gnu

      - name: "Release: Prepare assets"
        run: |
          mkdir -p dist
          cp target/aarch64-unknown-linux-gnu/release/blz dist/blz-linux-arm64
          chmod +x dist/blz-linux-arm64

      - name: "Release: Upload release assets"
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ inputs.tag }}
          generate_release_notes: true
          draft: true
          fail_on_unmatched_files: true
          files: |
            dist/blz-linux-arm64
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-windows-x64:
    if: ${{ false }} # legacy path disabled; replaced by matrix 'build'
    needs: verify-tag
    name: "Release: Build Windows x64"
    runs-on: windows-latest
    timeout-minutes: 45
    env:
      # Avoid requiring nasm on Windows by disabling ring ASM paths
      RING_DISABLE_ASM: 1
    steps:
      - name: "Release: Checkout tag"
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.tag }}

      - name: "Release: Set up Rust"
        uses: dtolnay/rust-toolchain@stable

      - name: "Release: Setup cache"
        uses: Swatinem/rust-cache@v2
        with:
          prefix-key: "v2-rust"
          key: ${{ runner.os }}-${{ hashFiles('**/Cargo.lock') }}
          cache-on-failure: true

      - name: "Release: Build (release)"
        run: |
          cargo build --release --locked

      - name: "Release: Prepare assets"
        shell: bash
        run: |
          mkdir -p dist
          cp target/release/blz.exe dist/blz-win32-x64.exe

      - name: "Release: Upload release assets"
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ inputs.tag }}
          generate_release_notes: true
          draft: true
          fail_on_unmatched_files: true
          files: |
            dist/blz-win32-x64.exe
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish:
    name: "Publish: orchestrate"
    needs: [build]
    uses: ./.github/workflows/publish.yml
    with:
      tag: ${{ inputs.tag }}
    secrets: inherit

  build:
    name: "Build (matrix)"
    needs: verify-tag
    strategy:
      fail-fast: false
      matrix:
        include:
          - runner: macos-14
            target: host
            out_name: blz-darwin-arm64
            package_macos_tar: true
            disable_ring_asm: true
            rustflags: '-C target-feature=+neon,+aes,+sha2,+pmull'
          - runner: macos-13
            target: host
            out_name: blz-darwin-x64
            package_macos_tar: true
            disable_ring_asm: false
          - runner: ubuntu-latest
            target: host
            out_name: blz-linux-x64
            package_macos_tar: false
            disable_ring_asm: false
          - runner: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            out_name: blz-linux-arm64
            package_macos_tar: false
            disable_ring_asm: false
            cross: true
          - runner: windows-latest
            target: host
            out_name: blz-win32-x64.exe
            package_macos_tar: false
            disable_ring_asm: true
    uses: ./.github/workflows/build-platform.yml
    with:
      runner: ${{ matrix.runner }}
      ref: ${{ inputs.tag }}
      tag: ${{ inputs.tag }}
      target: ${{ matrix.target }}
      out_name: ${{ matrix.out_name }}
      package_macos_tar: ${{ matrix.package_macos_tar }}
      cross: ${{ matrix.cross || false }}
      rustflags: ${{ matrix.rustflags || '' }}
      disable_ring_asm: ${{ matrix.disable_ring_asm || false }}
