name: release

on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to release (e.g., v0.1.6)'
        required: true
        type: string

permissions:
  contents: write

concurrency:
  group: release-${{ inputs.tag }}
  cancel-in-progress: false

jobs:
  # Safeguard: Verify this is actually a tag push
  verify-tag:
    name: Verify Tag
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.extract.outputs.version }}
    steps:
      - name: Check tag format
        run: |
          TAG="${{ inputs.tag }}"
          if [[ ! "$TAG" =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-.*)?$ ]]; then
            echo "::error::Invalid tag format: $TAG. Must be v*.*.* (e.g., v0.1.6)"
            exit 1
          fi
          echo "âœ… Tag: $TAG"

      - name: Extract version
        id: extract
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          TAG="${{ inputs.tag }}"
          if ! gh api "repos/${{ github.repository }}/git/refs/tags/${TAG}" --silent; then
            echo "::error::Tag $TAG does not exist in the repository"
            exit 1
          fi
          VERSION="${TAG#v}"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "ðŸ“¦ Version: $VERSION"

  build-darwin-arm64:
    needs: verify-tag
    name: Build macOS arm64
    runs-on: macos-14
    timeout-minutes: 45
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.tag }}

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Setup cache
        uses: Swatinem/rust-cache@v2
        with:
          prefix-key: "v2-rust"
          key: ${{ runner.os }}-${{ hashFiles('**/Cargo.lock') }}
          cache-on-failure: true

      - name: Build (release)
        run: |
          cargo build --release --locked

      - name: Prepare assets
        run: |
          mkdir -p dist
          cp target/release/blz dist/blz-darwin-arm64
          chmod +x dist/blz-darwin-arm64
          # Create tarball for Homebrew (contains a single 'blz' file)
          cp target/release/blz blz
          tar -czf dist/blz-darwin-arm64.tar.gz blz
          rm blz
          shasum -a 256 dist/blz-darwin-arm64.tar.gz > dist/blz-darwin-arm64.tar.gz.sha256

      - name: Upload release assets
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ inputs.tag }}
          generate_release_notes: true
          fail_on_unmatched_files: true
          files: |
            dist/blz-darwin-arm64
            dist/blz-darwin-arm64.tar.gz
            dist/blz-darwin-arm64.tar.gz.sha256
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-darwin-x64:
    needs: verify-tag
    name: Build macOS x64
    runs-on: macos-13
    timeout-minutes: 45
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.tag }}

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Setup cache
        uses: Swatinem/rust-cache@v2
        with:
          prefix-key: "v2-rust"
          key: ${{ runner.os }}-${{ hashFiles('**/Cargo.lock') }}
          cache-on-failure: true

      - name: Build (release)
        run: |
          cargo build --release --locked

      - name: Prepare assets
        run: |
          mkdir -p dist
          cp target/release/blz dist/blz-darwin-x64
          chmod +x dist/blz-darwin-x64
          # Create tarball for Homebrew (contains a single 'blz' file)
          cp target/release/blz blz
          tar -czf dist/blz-darwin-x64.tar.gz blz
          rm blz
          shasum -a 256 dist/blz-darwin-x64.tar.gz > dist/blz-darwin-x64.tar.gz.sha256

      - name: Upload release assets
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ inputs.tag }}
          generate_release_notes: true
          fail_on_unmatched_files: true
          files: |
            dist/blz-darwin-x64
            dist/blz-darwin-x64.tar.gz
            dist/blz-darwin-x64.tar.gz.sha256
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-linux-x64:
    needs: verify-tag
    name: Build Linux x64
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.tag }}

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Setup cache
        uses: Swatinem/rust-cache@v2
        with:
          prefix-key: "v2-rust"
          key: ${{ runner.os }}-${{ hashFiles('**/Cargo.lock') }}
          cache-on-failure: true

      - name: Build (release)
        run: |
          cargo build --release --locked

      - name: Prepare assets
        run: |
          mkdir -p dist
          cp target/release/blz dist/blz-linux-x64
          chmod +x dist/blz-linux-x64

      - name: Upload release assets
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ inputs.tag }}
          generate_release_notes: true
          fail_on_unmatched_files: true
          files: |
            dist/blz-linux-x64
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-linux-arm64:
    needs: verify-tag
    name: Build Linux arm64
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.tag }}

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: aarch64-unknown-linux-gnu

      - name: Setup cache
        uses: Swatinem/rust-cache@v2
        with:
          prefix-key: "v2-rust"
          key: ${{ runner.os }}-arm64-${{ hashFiles('**/Cargo.lock') }}
          cache-on-failure: true

      - name: Install cross toolchain
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu

      - name: Build (release)
        env:
          CC_aarch64_unknown_linux_gnu: aarch64-linux-gnu-gcc
          CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: aarch64-linux-gnu-gcc
        run: |
          cargo build --release --target aarch64-unknown-linux-gnu --locked

      - name: Prepare assets
        run: |
          mkdir -p dist
          cp target/aarch64-unknown-linux-gnu/release/blz dist/blz-linux-arm64
          chmod +x dist/blz-linux-arm64

      - name: Upload release assets
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ inputs.tag }}
          generate_release_notes: true
          fail_on_unmatched_files: true
          files: |
            dist/blz-linux-arm64
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-windows-x64:
    needs: verify-tag
    name: Build Windows x64
    runs-on: windows-latest
    timeout-minutes: 45
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.tag }}

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Setup cache
        uses: Swatinem/rust-cache@v2
        with:
          prefix-key: "v2-rust"
          key: ${{ runner.os }}-${{ hashFiles('**/Cargo.lock') }}
          cache-on-failure: true

      - name: Build (release)
        run: |
          cargo build --release --locked

      - name: Prepare assets
        shell: bash
        run: |
          mkdir -p dist
          cp target/release/blz.exe dist/blz-win32-x64.exe

      - name: Upload release assets
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ inputs.tag }}
          generate_release_notes: true
          fail_on_unmatched_files: true
          files: |
            dist/blz-win32-x64.exe
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  bump-homebrew:
    name: Bump Homebrew Tap
    needs: [build-darwin-arm64, build-darwin-x64]
    runs-on: ubuntu-latest
    steps:
      - name: Compute version and download tarballs
        id: tar
        shell: bash
        run: |
          set -euo pipefail
          TAG="${{ inputs.tag }}"
          VERSION="${TAG#v}"
          BASE_URL="https://github.com/${{ github.repository }}/releases/download/${TAG}"

          # Download with retries
          for i in {1..5}; do
            curl -fL -o blz-darwin-arm64.tar.gz "$BASE_URL/blz-darwin-arm64.tar.gz" && break
            echo "Retry $i/5..."
            sleep 10
          done

          for i in {1..5}; do
            curl -fL -o blz-darwin-x64.tar.gz "$BASE_URL/blz-darwin-x64.tar.gz" && break
            echo "Retry $i/5..."
            sleep 10
          done

          SHA_ARM64=$(shasum -a 256 blz-darwin-arm64.tar.gz | cut -d' ' -f1)
          SHA_X64=$(shasum -a 256 blz-darwin-x64.tar.gz | cut -d' ' -f1)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "sha_arm64=$SHA_ARM64" >> $GITHUB_OUTPUT
          echo "sha_x64=$SHA_X64" >> $GITHUB_OUTPUT

      - name: Checkout tap repo
        uses: actions/checkout@v4
        with:
          repository: outfitter-dev/homebrew-tap
          token: ${{ secrets.HOMEBREW_TAP_TOKEN }}
          path: homebrew-tap

      - name: Update formula
        shell: bash
        env:
          FORMULA: |
            class Blz < Formula
              desc "Fast local search for llms.txt"
              homepage "https://blz.run"
              version "${VERSION}"

              on_macos do
                if Hardware::CPU.arm?
                  url "https://github.com/outfitter-dev/blz/releases/download/v${VERSION}/blz-darwin-arm64.tar.gz"
                  sha256 "${SHA_ARM64}"
                else
                  url "https://github.com/outfitter-dev/blz/releases/download/v${VERSION}/blz-darwin-x64.tar.gz"
                  sha256 "${SHA_X64}"
                end

                def install
                  bin.install "blz"
                end

                test do
                  assert_match version.to_s, shell_output("#{bin}/blz --version")
                end
              end
            end
        run: |
          set -euo pipefail
          VERSION="${{ steps.tar.outputs.version }}"
          SHA_ARM64="${{ steps.tar.outputs.sha_arm64 }}"
          SHA_X64="${{ steps.tar.outputs.sha_x64 }}"
          printf "%s\n" "$FORMULA" > homebrew-tap/Formula/blz.rb
          # Substitute placeholders after write to appease linters
          sed -i.bak "s/\${VERSION}/${VERSION}/g" homebrew-tap/Formula/blz.rb
          sed -i.bak "s/\${SHA_ARM64}/${SHA_ARM64}/g" homebrew-tap/Formula/blz.rb
          sed -i.bak "s/\${SHA_X64}/${SHA_X64}/g" homebrew-tap/Formula/blz.rb
          rm -f homebrew-tap/Formula/blz.rb.bak

      - name: Create PR in tap repo
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.HOMEBREW_TAP_TOKEN }}
          path: homebrew-tap
          branch: bump-blz-${{ steps.tar.outputs.version }}
          commit-message: "blz ${{ steps.tar.outputs.version }}"
          title: "blz ${{ steps.tar.outputs.version }}"
          body: |
            Bump blz formula to ${{ steps.tar.outputs.version }}.
            - arm64 sha256: ${{ steps.tar.outputs.sha_arm64 }}
            - x64   sha256: ${{ steps.tar.outputs.sha_x64 }}

  cargo-publish:
    name: Publish to crates.io
    runs-on: ubuntu-latest
    needs: [build-darwin-arm64, build-darwin-x64, build-linux-x64, build-linux-arm64, build-windows-x64]
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.tag }}
      - uses: dtolnay/rust-toolchain@stable
      - name: Install jq
        run: |
          sudo apt-get update
          sudo apt-get install -y jq
      - name: Check publishable versions
        id: check
        run: |
          if grep -q 'version = ".*-dev"' Cargo.toml; then
            echo "dev=true" >> $GITHUB_OUTPUT
          else
            echo "dev=false" >> $GITHUB_OUTPUT
          fi
      - name: Extract version
        if: steps.check.outputs.dev == 'false'
        id: ver
        shell: bash
        run: |
          VER=$(grep -m1 '^version\s*=\s*"' Cargo.toml | sed 's/.*"\(.*\)".*/\1/')
          echo "version=$VER" >> $GITHUB_OUTPUT
      - name: Verify Cargo version matches tag
        if: steps.check.outputs.dev == 'false'
        shell: bash
        run: |
          TAG="${{ inputs.tag }}"
          TAG="${TAG#v}"
          if [ "${TAG}" != "${{ steps.ver.outputs.version }}" ]; then
            echo "Tag ${TAG} does not match Cargo.toml version ${{ steps.ver.outputs.version }}" >&2
            exit 1
          fi
      - name: Publish (blz-core)
        if: steps.check.outputs.dev == 'false'
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
        run: |
          cargo publish -p blz-core --locked
      - name: Wait for blz-core to propagate
        if: steps.check.outputs.dev == 'false'
        shell: bash
        run: |
          set -euo pipefail
          V=${{ steps.ver.outputs.version }}
          echo "Waiting for blz-core $V to appear on crates.io index..."
          for i in {1..30}; do
            if curl -fsSL https://crates.io/api/v1/crates/blz-core/versions | jq -r '.versions[].num' | grep -qx "$V"; then
              echo "blz-core $V is available."
              exit 0
            fi
            sleep 5
          done
          echo "Timed out waiting for blz-core $V to propagate" >&2
          exit 1
      - name: Publish (blz-cli)
        if: steps.check.outputs.dev == 'false'
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
        run: |
          cargo publish -p blz-cli --locked

  npm-publish:
    name: Publish to npm
    runs-on: ubuntu-latest
    needs: [build-darwin-arm64, build-darwin-x64, build-linux-x64, build-linux-arm64, build-windows-x64]
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.tag }}
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'
          scope: '@outfitter'
      - name: Validate package.json version matches tag
        shell: bash
        run: |
          TAG="${{ inputs.tag }}"
          TAG="${TAG#v}"
          PKG=$(node -p "require('./package.json').version")
          if [ "$TAG" != "$PKG" ]; then
            echo "Tag $TAG does not match package.json version $PKG" >&2
            exit 1
          fi
      - name: npm publish
        run: npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
