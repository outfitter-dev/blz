name: Publish (Homebrew)

on:
  workflow_call:
    inputs:
      tag:
        description: 'Git tag to publish (e.g., v0.2.0)'
        required: true
        type: string
      version:
        description: 'Version string without leading v'
        required: true
        type: string
      enabled:
        description: 'Whether to run the Homebrew publication'
        required: false
        default: true
        type: boolean
      sha_arm64:
        description: 'SHA256 for blz-${version}-darwin-arm64.tar.gz'
        required: false
        type: string
      sha_x64:
        description: 'SHA256 for blz-${version}-darwin-x64.tar.gz'
        required: false
        type: string
      sha_linux:
        description: 'SHA256 for blz-${version}-linux-x64.tar.gz'
        required: false
        type: string
    secrets:
      homebrew-token:
        required: true
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to publish (e.g., v0.2.0)'
        required: true
        type: string
      sha_arm64:
        description: 'Optional sha256 for darwin-arm64 artifact (fallback to release assets when omitted)'
        required: false
        type: string
      sha_x64:
        description: 'Optional sha256 for darwin-x64 artifact (fallback to release assets when omitted)'
        required: false
        type: string
      sha_linux:
        description: 'Optional sha256 for linux-x64 artifact (fallback to release assets when omitted)'
        required: false
        type: string

permissions:
  contents: read

jobs:
  publish:
    name: Update Homebrew tap
    runs-on: ubuntu-latest
    steps:
      - name: Resolve inputs
        id: resolve
        env:
          INPUT_TAG: ${{ inputs.tag }}
          INPUT_VERSION: ${{ inputs.version }}
          INPUT_ENABLED: ${{ inputs.enabled }}
          INPUT_SHA_ARM64: ${{ inputs.sha_arm64 }}
          INPUT_SHA_X64: ${{ inputs.sha_x64 }}
          INPUT_SHA_LINUX: ${{ inputs.sha_linux }}
          EVENT_NAME: ${{ github.event_name }}
        run: |
          if [[ "$EVENT_NAME" == "workflow_dispatch" ]]; then
            TAG="$INPUT_TAG"
            VERSION="${TAG#v}"
            ENABLED='true'
          else
            TAG="$INPUT_TAG"
            VERSION="$INPUT_VERSION"
            ENABLED="${INPUT_ENABLED:-true}"
          fi
          if [[ "$ENABLED" != 'true' ]]; then
            {
              echo "enabled=false"
            } >> "$GITHUB_OUTPUT"
            exit 0
          fi

          SHA_MODE='download'
          if [[ -n "${INPUT_SHA_ARM64:-}" || -n "${INPUT_SHA_X64:-}" || -n "${INPUT_SHA_LINUX:-}" ]]; then
            if [[ -z "${INPUT_SHA_ARM64:-}" || -z "${INPUT_SHA_X64:-}" || -z "${INPUT_SHA_LINUX:-}" ]]; then
              echo "::error::All SHA inputs required together. Missing: arm64=${INPUT_SHA_ARM64:-<empty>}, x64=${INPUT_SHA_X64:-<empty>}, linux=${INPUT_SHA_LINUX:-<empty>}" >&2
              exit 1
            fi
            SHA_MODE='provided'
          fi

          if [[ "$EVENT_NAME" != "workflow_dispatch" && "$SHA_MODE" != 'provided' ]]; then
            echo "::error::Missing SHA inputs; publish workflow must supply sha_arm64/sha_x64/sha_linux" >&2
            exit 1
          fi

          {
            echo "enabled=true"
            echo "tag=$TAG"
            echo "version=$VERSION"
            echo "sha_mode=$SHA_MODE"
            if [[ "$SHA_MODE" == 'provided' ]]; then
              echo "sha_arm64=$INPUT_SHA_ARM64"
              echo "sha_x64=$INPUT_SHA_X64"
              echo "sha_linux=$INPUT_SHA_LINUX"
            fi
          } >> "$GITHUB_OUTPUT"

      - name: Skip when disabled
        if: ${{ steps.resolve.outputs.enabled != 'true' }}
        run: echo "Homebrew publication disabled for this release."

      - name: Check release assets exist
        if: ${{ steps.resolve.outputs.enabled == 'true' && steps.resolve.outputs.sha_mode != 'provided' }}
        id: assets
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VERSION: ${{ steps.resolve.outputs.version }}
        shell: bash
        run: |
          # shellcheck disable=SC2155
          set -euo pipefail
          TAG='${{ steps.resolve.outputs.tag }}'

          # Retry function for gh release view with exponential backoff
          retry_gh_release_view() {
            local max_attempts=5
            for attempt in $(seq 1 "$max_attempts"); do
              echo "Checking release assets (attempt $attempt/$max_attempts)..." >> "$GITHUB_STEP_SUMMARY"
              if gh release view "$TAG" --repo "${{ github.repository }}" --json assets > /tmp/release-assets.json 2>/tmp/gh-release-error; then
                # Verify JSON is valid and contains expected structure
                if jq -e '.assets | length' /tmp/release-assets.json >/dev/null 2>&1; then
                  echo "Successfully retrieved release assets on attempt $attempt" >> "$GITHUB_STEP_SUMMARY"
                  return 0
                else
                  echo "::warning::Retrieved JSON is empty or invalid on attempt $attempt"
                fi
              fi
              local err
              err=$(cat /tmp/gh-release-error 2>/dev/null || echo "unknown error")
              echo "::warning::gh release view failed for $TAG on attempt $attempt/$max_attempts: $err"
              if [[ "$attempt" -lt "$max_attempts" ]]; then
                local wait_time
                wait_time=$((2 ** attempt))
                echo "Retrying in ${wait_time}s..."
                sleep "$wait_time"
              fi
            done
            local last_error
            last_error=$(cat /tmp/gh-release-error 2>/dev/null || echo 'unknown')
            echo "::error::Failed to retrieve release assets for $TAG after $max_attempts attempts. Last error: $last_error" >> "$GITHUB_STEP_SUMMARY"
            return 1
          }

          # Retry the release view operation
          if ! retry_gh_release_view; then
            echo "ready=false" >> "$GITHUB_OUTPUT"
            echo "::error::Failed to retrieve release assets after maximum retries. Failing job to ensure visibility."
            exit 1
          fi

          # Parse asset counts from the retrieved data
          ARM_COUNT=""
          X64_COUNT=""
          LINUX_COUNT=""
          ARM_COUNT=$(jq -r --arg version "$VERSION" '.assets | map(select(.name == ("blz-"+$version+"-darwin-arm64.tar.gz"))) | length' /tmp/release-assets.json)
          X64_COUNT=$(jq -r --arg version "$VERSION" '.assets | map(select(.name == ("blz-"+$version+"-darwin-x64.tar.gz"))) | length' /tmp/release-assets.json)
          LINUX_COUNT=$(jq -r --arg version "$VERSION" '.assets | map(select(.name == ("blz-"+$version+"-linux-x64.tar.gz"))) | length' /tmp/release-assets.json)

          if [ "${ARM_COUNT:-0}" -eq 0 ] || [ "${X64_COUNT:-0}" -eq 0 ] || [ "${LINUX_COUNT:-0}" -eq 0 ]; then
            {
              echo "ready=false"
            } >> "$GITHUB_OUTPUT"
            echo "Homebrew assets not ready for $TAG (arm64=$ARM_COUNT, x64=$X64_COUNT, linux=$LINUX_COUNT)" >> "$GITHUB_STEP_SUMMARY"
          else
            {
              echo "ready=true"
            } >> "$GITHUB_OUTPUT"
            echo "All Homebrew assets ready for $TAG (arm64=$ARM_COUNT, x64=$X64_COUNT, linux=$LINUX_COUNT)" >> "$GITHUB_STEP_SUMMARY"
          fi

          # Clean up temp files
          rm -f /tmp/release-assets.json /tmp/gh-release-error

      - name: Checkout source (for scripts)
        if: ${{ steps.resolve.outputs.enabled == 'true' && (steps.resolve.outputs.sha_mode == 'provided' || steps.assets.outputs.ready == 'true') }}
        uses: actions/checkout@v4
        with:
          ref: ${{ steps.resolve.outputs.tag }}
          path: src

      - name: Compute shas and download assets
        if: ${{ steps.resolve.outputs.enabled == 'true' && steps.resolve.outputs.sha_mode != 'provided' && steps.assets.outputs.ready == 'true' }}
        id: tar
        shell: bash
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # shellcheck disable=SC2155
          set -euo pipefail
          TAG='${{ steps.resolve.outputs.tag }}'
          VERSION='${{ steps.resolve.outputs.version }}'

          # Retry function for gh release download with exponential backoff
          retry_gh_release_download() {
            local pattern="$1"
            local filename
            filename=$(basename "$pattern")
            local max_attempts=5

            for attempt in $(seq 1 "$max_attempts"); do
              echo "Downloading $filename (attempt $attempt/$max_attempts)..." >> "$GITHUB_STEP_SUMMARY"
              if gh release download "$TAG" --repo "${{ github.repository }}" --pattern "$pattern" --dir . --clobber 2>/tmp/gh-download-error; then
                if [[ -f "$filename" ]]; then
                  echo "Successfully downloaded $filename on attempt $attempt" >> "$GITHUB_STEP_SUMMARY"
                  return 0
                else
                  echo "::warning::Download succeeded but $filename not found on attempt $attempt/$max_attempts"
                fi
              else
                local err
                err=$(cat /tmp/gh-download-error 2>/dev/null || echo "unknown error")
                echo "::warning::gh release download failed for $filename on attempt $attempt/$max_attempts: $err"
              fi

              if [[ "$attempt" -lt "$max_attempts" ]]; then
                local wait_time
                wait_time=$((2 ** attempt))
                echo "Retrying download of $filename in ${wait_time}s..."
                sleep "$wait_time"
              fi
            done

            local err
            err=$(cat /tmp/gh-download-error 2>/dev/null || echo "unknown error")
            echo "::error::Failed to download $filename after $max_attempts attempts. Last error: $err" >> "$GITHUB_STEP_SUMMARY"
            return 1
          }

          # Download each asset with retry logic
          echo "Starting asset downloads for $TAG..." >> "$GITHUB_STEP_SUMMARY"

          if ! retry_gh_release_download "blz-${VERSION}-darwin-arm64.tar.gz"; then
            echo "::error::Failed to download darwin-arm64 asset"
            exit 1
          fi

          if ! retry_gh_release_download "blz-${VERSION}-darwin-x64.tar.gz"; then
            echo "::error::Failed to download darwin-x64 asset"
            exit 1
          fi

          if ! retry_gh_release_download "blz-${VERSION}-linux-x64.tar.gz"; then
            echo "::error::Failed to download linux-x64 asset"
            exit 1
          fi

          echo "All assets downloaded successfully, computing SHA256 hashes..." >> "$GITHUB_STEP_SUMMARY"

          SHA_ARM64=""
          SHA_X64=""
          SHA_LINUX=""
          SHA_ARM64=$(sha256sum "blz-${VERSION}-darwin-arm64.tar.gz" | awk '{print $1}')
          SHA_X64=$(sha256sum "blz-${VERSION}-darwin-x64.tar.gz" | awk '{print $1}')
          SHA_LINUX=$(sha256sum "blz-${VERSION}-linux-x64.tar.gz" | awk '{print $1}')
          echo "::add-mask::$SHA_ARM64"
          echo "::add-mask::$SHA_X64"
          echo "::add-mask::$SHA_LINUX"
          {
            echo "sha_arm64=$SHA_ARM64"
            echo "sha_x64=$SHA_X64"
            echo "sha_linux=$SHA_LINUX"
          } >> "$GITHUB_OUTPUT"

          echo "SHA256 hashes computed successfully (arm64: $SHA_ARM64, x64: $SHA_X64, linux: $SHA_LINUX)" >> "$GITHUB_STEP_SUMMARY"

          # Clean up temp files
          rm -f /tmp/gh-download-error

      - name: Checkout tap repository
        if: ${{ steps.resolve.outputs.enabled == 'true' && (steps.resolve.outputs.sha_mode == 'provided' || steps.assets.outputs.ready == 'true') }}
        uses: actions/checkout@v4
        with:
          repository: outfitter-dev/homebrew-tap
          token: ${{ secrets.homebrew-token }}
          path: homebrew-tap

      - name: Update formula
        if: ${{ steps.resolve.outputs.enabled == 'true' && (steps.resolve.outputs.sha_mode == 'provided' || steps.assets.outputs.ready == 'true') }}
        shell: bash
        env:
          REPO: ${{ github.repository }}
          VERSION: ${{ steps.resolve.outputs.version }}
          SHA_ARM64: ${{ steps.tar.outputs.sha_arm64 || steps.resolve.outputs.sha_arm64 }}
          SHA_X64: ${{ steps.tar.outputs.sha_x64 || steps.resolve.outputs.sha_x64 }}
          SHA_LINUX: ${{ steps.tar.outputs.sha_linux || steps.resolve.outputs.sha_linux }}
          TAP_DIR: homebrew-tap
        run: |
          bash src/scripts/release/update-brew.sh

      - name: Create tap PR
        if: ${{ steps.resolve.outputs.enabled == 'true' && (steps.resolve.outputs.sha_mode == 'provided' || steps.assets.outputs.ready == 'true') }}
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.homebrew-token }}
          path: homebrew-tap
          branch: bump-blz-${{ steps.resolve.outputs.version }}
          commit-message: "blz ${{ steps.resolve.outputs.version }}"
          title: "blz ${{ steps.resolve.outputs.version }}"
          body: |
            Bump blz formula to ${{ steps.resolve.outputs.version }}.
            - arm64 sha256: ${{ steps.tar.outputs.sha_arm64 || steps.resolve.outputs.sha_arm64 }}
            - x64   sha256: ${{ steps.tar.outputs.sha_x64 || steps.resolve.outputs.sha_x64 }}
            - linux sha256: ${{ steps.tar.outputs.sha_linux || steps.resolve.outputs.sha_linux }}
