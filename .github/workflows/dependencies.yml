name: Dependency Security & Management

on:
  push:
    branches: [main]
    paths:
      - 'Cargo.toml'
      - 'Cargo.lock'
      - '**/Cargo.toml'
      - 'deny.toml'
      - '.github/workflows/dependencies.yml'
  pull_request:
    paths:
      - 'Cargo.toml'
      - 'Cargo.lock'
      - '**/Cargo.toml'
      - 'deny.toml'
      - '.github/workflows/dependencies.yml'
  schedule:
    # Run weekly to catch new advisories
    - cron: '0 0 * * MON'
  workflow_dispatch:

jobs:
  optimize_ci:
    runs-on: ubuntu-latest
    outputs:
      # Default to skip=false if Graphite is not configured or action fails
      skip: ${{ steps.check_skip.outputs.skip || steps.default_skip.outputs.skip || 'false' }}
    steps:
      - name: Optimize CI
        id: check_skip
        uses: withgraphite/graphite-ci-action@main
        with:
          graphite_token: ${{ secrets.GRAPHITE_TOKEN }}
        continue-on-error: true

      - name: Default skip to false when unset
        id: default_skip
        if: always() && (steps.check_skip.outputs.skip == '' || steps.check_skip.outcome == 'failure')
        run: echo "skip=false" >> "$GITHUB_OUTPUT"

  unused-deps:
    name: Check for unused dependencies
    needs: optimize_ci
    # Run unless explicitly skipped by Graphite action
    if: needs.optimize_ci.outputs.skip != 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Install cargo-shear
        run: |
          if ! command -v cargo-shear &> /dev/null; then
            cargo install cargo-shear
          fi
      
      - name: Check for unused dependencies
        run: cargo shear
        
  cargo-deny:
    name: Dependency validation
    needs: optimize_ci
    if: needs.optimize_ci.outputs.skip != 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        checks:
          - advisories
          - bans licenses sources
    steps:
      - uses: actions/checkout@v4
      
      - name: Run cargo-deny
        uses: EmbarkStudios/cargo-deny-action@v2
        with:
          command: check ${{ matrix.checks }}
          arguments: --all-features
          
  security-audit:
    name: Security advisories (non-blocking)
    needs: optimize_ci
    if: needs.optimize_ci.outputs.skip != 'true'
    runs-on: ubuntu-latest
    continue-on-error: true # Don't fail CI on new advisories
    steps:
      - uses: actions/checkout@v4
      
      - name: Run advisory check
        uses: EmbarkStudios/cargo-deny-action@v2
        with:
          command: check advisories
          arguments: --all-features
          
      - name: Upload advisory report
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: advisory-report
          path: |
            cargo-deny.log

  dependency-review:
    name: Dependency Review
    needs: optimize_ci
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && needs.optimize_ci.outputs.skip != 'true'
    steps:
      - uses: actions/checkout@v4
      
      - name: Dependency Review
        uses: actions/dependency-review-action@v4
        with:
          fail-on-severity: high
          deny-licenses: GPL-3.0, AGPL-3.0
          # Check for known vulnerabilities
          vulnerability-check: true
