skip_in_ci: true
colors: true

pre-commit:
  # Keep pre-commit blazing fast: hygiene + fmt + quick compile + basic clippy
  # Target: <30s total
  parallel: true
  commands:
    yaml_format:
      run: |
        bash -lc '
          export PATH="$HOME/go/bin:$PATH"
          if ! command -v yamlfmt >/dev/null 2>&1; then
            echo "yamlfmt not found. Install with: go install github.com/google/yamlfmt/cmd/yamlfmt@v0.10.0"
            echo "Or run: just bootstrap-fast"
            exit 2
          fi
          yamlfmt -dry -conf .yamlfmt.yml .github/workflows/*.{yml,yaml} || true
          yamlfmt -conf .yamlfmt.yml .github/workflows/*.{yml,yaml}
          if [ -n "$(git diff --name-only -- .github/workflows)" ]; then
            echo "::warning::yamlfmt made formatting changes. Please re-stage files:"
            git diff --name-only -- .github/workflows
            exit 1
          fi
        '
      stage_fixed: true
    actionlint:
      run: |
        bash -lc '
          if ! command -v actionlint >/dev/null 2>&1; then
            echo "actionlint not found. Install with: go install github.com/rhysd/actionlint/cmd/actionlint@latest"
            echo "Or run: just bootstrap-fast"
            exit 2
          fi
          CHANGED=$(git diff -z --name-only --cached --diff-filter=d -- \
            ".github/workflows/*.yml" \
            ".github/workflows/*.yaml")
          if [ -z "$CHANGED" ]; then
            exit 0
          fi
          # Prefer running shellcheck if present to surface script issues early
          if command -v shellcheck >/dev/null 2>&1; then
            printf '%s' "$CHANGED" | xargs -0 actionlint -shellcheck="$(command -v shellcheck)"
          else
            echo "(tip) Install shellcheck for richer diagnostics"
            printf '%s' "$CHANGED" | xargs -0 actionlint
          fi
        '
    whitespace:
      run: git diff --check --staged

    rustfmt:
      run: |
        bash -lc '
          if ! command -v rustfmt >/dev/null; then
            echo "rustfmt not found. Install with: rustup component add rustfmt"
            echo "Or run: just bootstrap-fast"
            exit 2
          fi
          cargo fmt --all
        '
      stage_fixed: true

    cargo_check:
      run: cargo check --workspace --quiet

    clippy_basic:
      run: |
        bash -lc '
          if ! cargo clippy -V >/dev/null 2>&1; then
            echo "clippy not available. Install with: rustup component add clippy"
            echo "Or run: just bootstrap-fast"
            exit 2
          fi
          # Quick clippy check without full strictness (saves those for pre-push)
          # Only check workspace members, not all targets (no benches, examples)
          cargo clippy --workspace --quiet -- -W clippy::all
        '

commit-msg:
  commands:
    commitlint:
      run: |
        if command -v commitlint &> /dev/null; then
          commitlint --edit {1}
        else
          echo "commit message check failed: commitlint not installed."
          echo "Install with: cargo install commitlint-rs"
          echo "Or run: just bootstrap-fast"
          exit 2
        fi

pre-push:
  # Strict quality gates: full clippy + tests
  # Target: <3 minutes with caching
  # Bypass with: scripts/hooks-bypass.sh enable
  parallel: false
  commands:
    clippy_strict:
      always_run: true
      run: |
        bash -lc '
          if [ -f .hooks/allow-strict-bypass ]; then
            echo "⏭  Strict bypass enabled (.hooks/allow-strict-bypass). Skipping clippy_strict."
            exit 0
          fi
          if ! cargo clippy -V >/dev/null 2>&1; then
            echo "clippy not available. Install with: rustup component add clippy"
            echo "Or run: just bootstrap-fast"
            exit 2
          fi
          # Enable sccache if available for faster compilation
          if command -v sccache >/dev/null 2>&1; then
            export RUSTC_WRAPPER=sccache
            echo "🔧 Using sccache for build acceleration"
          else
            echo "💡 Tip: Install sccache for 2-3x faster builds: cargo install sccache"
          fi
          # Run strict clippy on all targets with warnings as errors
          cargo clippy --workspace --all-targets -- -D warnings
        '

    tests:
      always_run: true
      run: |
        bash -lc '
          if [ -f .hooks/allow-strict-bypass ]; then
            echo "⏭  Strict bypass enabled (.hooks/allow-strict-bypass). Skipping tests."
            exit 0
          fi
          if [ -z "${CI:-}" ]; then
            # Check both local and shared targets for bloat
            if [ -x scripts/prune-target.sh ]; then
              scripts/prune-target.sh --check --threshold 60 || true
            fi
            if [ -x scripts/prune-shared-target.sh ] && [ -d target-shared ]; then
              scripts/prune-shared-target.sh --check --threshold 60 || true
            fi
          fi
          # Enable sccache if available for faster compilation
          if command -v sccache >/dev/null 2>&1; then
            export RUSTC_WRAPPER=sccache
            echo "🔧 Using sccache for build acceleration"
          else
            echo "💡 Tip: Install sccache for 2-3x faster builds: cargo install sccache"
          fi
          # Run tests excluding slow compile-time UI tests (run those in CI)
          # compile_fail_ui takes 120+ seconds and is marked #[ignore] - CI runs it separately
          if command -v cargo-nextest >/dev/null 2>&1; then
            # nextest runs tests in parallel, much faster
            echo "🧪 Running tests with cargo-nextest (parallel execution)..."
            cargo nextest run --workspace -E "not test(compile_fail_ui)"
            # Doc tests must be run separately (nextest doesn'\''t support them yet)
            cargo test --doc --workspace --quiet
          else
            echo "🧪 Running tests with cargo test..."
            echo "💡 Tip: Install cargo-nextest for 2-3x faster test execution: cargo install cargo-nextest"
            # Exclude the slow UI test explicitly
            cargo test --workspace --quiet -- --skip compile_fail_ui
          fi
        '
